/*
 * Copyright (c) 2021 Shadew
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url 'https://maven.shadew.net/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'net.shadew.modutil', name: 'shade', version: '1.0'
        classpath group: 'net.shadew.modutil', name: 'inject-constants', version: '1.0'
        classpath group: 'net.shadew.modutil', name: 'changelog', version: '1.0'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'net.shadew.modutil.shade'
apply plugin: 'net.shadew.modutil.inject-constants'
apply plugin: 'net.shadew.modutil.changelog'
apply plugin: 'idea'
apply plugin: 'maven-publish'

def mod = [
    id     : findProperty("mod.id"),
    version: findProperty("mod.version"),
    group  : findProperty("mod.group"),
    root   : findProperty("mod.root")
]

def env = [
    mappingsChannel : findProperty("env.mappings.channel"),
    mappingsVersion : findProperty("env.mappings.version"),
    minecraftVersion: findProperty("env.minecraft.version"),
    forgeVersion    : findProperty("env.forge.version"),
    utilVersion     : findProperty("env.util.version"),
    buildTimestamp  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
]

version = mod.version
group = mod.group
archivesBaseName = mod.id

sourceCompatibility   \
   = targetCompatibility   \
   = compileJava.sourceCompatibility   \
   = compileJava.targetCompatibility   \
   = '1.8'


minecraft {
    mappings channel: "$env.mappingsChannel", version: "$env.mappingsVersion"

    runs {
        client {
            workingDirectory file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            mods {
                maybeCreate("${mod.id}").source((SourceSet) sourceSets.main)
            }
        }

        server {
            workingDirectory file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            mods {
                maybeCreate("${mod.id}").source((SourceSet) sourceSets.main)
            }
        }

        data {
            workingDirectory file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            args '--mod', mod.id + '', '--all',
                 '--output', file('src/generated/resources/'),
                 '--existing', file('src/main/resources/')

            mods {
                maybeCreate("${mod.id}").source((SourceSet) sourceSets.main)
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "Shadew's Maven"
        url = "http://maven.shadew.net/"
    }
    maven {
        name = "tterrag's maven"
        url = "https://maven.tterrag.com/"
    }
}

configurations {
    embed // External deps embedded into the JAR file
    compile.extendsFrom(embed)
}

sourceSets.main.resources {
    srcDir "$projectDir/src/generated/resources"
}

dependencies {
    minecraft "net.minecraftforge:forge:${env.minecraftVersion}-${env.forgeVersion}"
    embed("net.shadew:shwutil:${env.utilVersion}") {
        transitive false
    }
}

jar {
    doFirst {
        // Include necessary dependencies
        from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes([
            "Specification-Title"     : "$mod.id",
            "Specification-Vendor"    : "$mod.group",
            "Specification-Version"   : "1",
            "Implementation-Title"    : "$mod.id",
            "Implementation-Vendor"   : "$mod.group",
            "Implementation-Version"  : "$mod.version",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ]
        )
    }
}

jar.finalizedBy('reobfJar')

shading {
    shade('net.shadew.util', "${mod.root}.internal.net.shadew.util")
}

constants {
    annotation "${mod.root}.DynamicConstant"

    constant("test_static_1", "Static Defined 1")
    constant("test_static_2", "Static Defined 2")
    constant("test_static_3", "Static Defined 3")

    constants test_map_1: "Map Defined 1", test_map_2: "Map Defined 2", test_map_3: "Map Defined 3"

    constantsFromProperties()

    constants {
        def map = [
            test_dynamic_1: "Dynamic Defined 1",
            test_dynamic_2: "Dynamic Defined 2",
            test_dynamic_3: "Dynamic Defined 3"
        ]

        map.get(it)
    }

    pattern(/.*\/inject.txt$/, /@env\{(\w+)\}/)
}

changelog {
    updateJson file("$projectDir/versioninfo/update.json")
    markdownChangelog file("$projectDir/versioninfo/latest_changelog.md")

    changelogJson file("$projectDir/changelog.json")
}
